diff --git a/src/sessionmanagerplugin/session/session.go b/src/sessionmanagerplugin/session/session.go
index f0d650c..7901e89 100644
--- a/src/sessionmanagerplugin/session/session.go
+++ b/src/sessionmanagerplugin/session/session.go
@@ -86,12 +86,12 @@ type Session struct {
 	DisplayMode           sessionutil.DisplayMode
 }
 
-//startSession create the datachannel for session
+// startSession create the datachannel for session
 var startSession = func(session *Session, log log.T) error {
 	return session.Execute(log)
 }
 
-//setSessionHandlersWithSessionType set session handlers based on session subtype
+// setSessionHandlersWithSessionType set session handlers based on session subtype
 var setSessionHandlersWithSessionType = func(session *Session, log log.T) error {
 	// SessionType is set inside DataChannel
 	sessionSubType := SessionRegistry[session.SessionType]
@@ -209,7 +209,7 @@ func ValidateInputAndStartSession(args []string, out io.Writer) {
 	}
 }
 
-//Execute create data channel and start the session
+// Execute create data channel and start the session
 func (s *Session) Execute(log log.T) (err error) {
 	fmt.Fprintf(os.Stdout, "\nStarting session with SessionId: %s\n", s.SessionId)
 
diff --git a/src/sessionmanagerplugin/session/shellsession/shellsession_unix.go b/src/sessionmanagerplugin/session/shellsession/shellsession_unix.go
index 985cf80..783c219 100644
--- a/src/sessionmanagerplugin/session/shellsession/shellsession_unix.go
+++ b/src/sessionmanagerplugin/session/shellsession/shellsession_unix.go
@@ -28,7 +28,7 @@ import (
 	"github.com/aws/session-manager-plugin/src/message"
 )
 
-//disableEchoAndInputBuffering disables echo to avoid double echo and disable input buffering
+// disableEchoAndInputBuffering disables echo to avoid double echo and disable input buffering
 func (s *ShellSession) disableEchoAndInputBuffering() {
 	getState(&s.originalSttyState)
 	setState(bytes.NewBufferString("cbreak"))
@@ -58,7 +58,7 @@ func (s *ShellSession) Stop() {
 	os.Exit(0)
 }
 
-//handleKeyboardInput handles input entered by customer on terminal
+// handleKeyboardInput handles input entered by customer on terminal
 func (s *ShellSession) handleKeyboardInput(log log.T) (err error) {
 	var (
 		stdinBytesLen int
diff --git a/src/sessionmanagerplugin/session/shellsession/shellsession_windows.go b/src/sessionmanagerplugin/session/shellsession/shellsession_windows.go
index 333fd4d..71a3538 100644
--- a/src/sessionmanagerplugin/session/shellsession/shellsession_windows.go
+++ b/src/sessionmanagerplugin/session/shellsession/shellsession_windows.go
@@ -58,7 +58,7 @@ func (s *ShellSession) Stop() {
 	os.Exit(0)
 }
 
-//handleKeyboardInput handles input entered by customer on terminal
+// handleKeyboardInput handles input entered by customer on terminal
 func (s *ShellSession) handleKeyboardInput(log log.T) (err error) {
 	var (
 		character rune         //character input from keyboard
diff --git a/src/ssmcli-main/main.go b/src/ssmcli-main/main.go
index 498fedd..9cb9ac2 100644
--- a/src/ssmcli-main/main.go
+++ b/src/ssmcli-main/main.go
@@ -20,7 +20,7 @@ import (
 	"github.com/aws/session-manager-plugin/src/ssmclicommands"
 )
 
-//Created a ssmcli binary, used for testing purpose only.
+// Created a ssmcli binary, used for testing purpose only.
 func main() {
 	ssmclicommands.ValidateInput(os.Args, os.Stdout)
 }
diff --git a/src/ssmclicommands/startsession.go b/src/ssmclicommands/startsession.go
index d37edb7..81ef703 100644
--- a/src/ssmclicommands/startsession.go
+++ b/src/ssmclicommands/startsession.go
@@ -88,7 +88,7 @@ type StartSessionCommand struct {
 	sdk      *ssm.SSM
 }
 
-//getSSMClient generate ssm client by configuration
+// getSSMClient generate ssm client by configuration
 var getSSMClient = func(log log.T, region string, profile string, endpoint string) (*ssm.SSM, error) {
 	sdkutil.SetRegionAndProfile(region, profile)
 
@@ -101,7 +101,7 @@ var getSSMClient = func(log log.T, region string, profile string, endpoint strin
 	return ssm.New(sdkSession), nil
 }
 
-//executeSession to open datachannel
+// executeSession to open datachannel
 var executeSession = func(log log.T, session *session.Session) (err error) {
 	return session.Execute(log)
 }
@@ -141,7 +141,7 @@ func (c *StartSessionCommand) Help() string {
 	return c.helpText
 }
 
-//validates and execute start-session command
+// validates and execute start-session command
 func (s *StartSessionCommand) Execute(parameters map[string][]string) (error, string) {
 	var (
 		err        error
@@ -202,7 +202,7 @@ func (s *StartSessionCommand) Execute(parameters map[string][]string) (error, st
 	return err, "StartSession executed successfully"
 }
 
-//func to validate start-session input
+// func to validate start-session input
 func (StartSessionCommand) validateStartSessionInput(parameters map[string][]string) []string {
 	validation := make([]string, 0)
 
